name: Add package to release

permissions:
  contents: write
  
on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
    - name: create_release
      id: create_release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        draft: false
        prerelease: false
        name: Release ${{ github.ref }}
        tag_name: ${{ github.ref }}
    outputs:
      upload_url: ${{ steps.create_release.outputs.assets }}

  build_and_add_to_release:
    needs: create-release
    strategy:
      matrix:
        os: [ubuntu-22.04]

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3

    - name: Set environment variables
      run: echo CONAN_USER_HOME=${{ runner.temp }}/conan/data >> ${{ github.env }}
      
    - name: Cache Conan packages
      uses: actions/cache@v3
      with:
        path: ${{ env.CONAN_USER_HOME }}/.conan/data
        key: conandata-${{ runner.os }}-${{ hashFiles('conanfile.py') }}
        restore-keys: conandata-${{ runner.os }}-

    - name: Install Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.8"
        cache: 'pip'

    - name: Install dependencies
      shell: bash
      run: |
        pip install -r requirements.txt
        conan profile new default --detect
        if [ ${{ matrix.os }} = ubuntu-22.04 ]; then
          conan profile update settings.compiler.libcxx=libstdc++11 default
        fi
        conan install . -b missing

    - name: Configure
      shell: pwsh
      run: cmake "--preset=ci-$("${{ matrix.os }}".split("-")[0])"

    - name: Build
      run: cmake --build build --config Release -j 2

    - name: Install
      run: cmake --install build --prefix ${{ runner.temp }}/install

    - name: Zip install
      run: zip -r ${{ github.event.repository.name }}-${{ github.ref }}-${{ runner.os }}.zip ${{ runner.temp }}/install
      
    - name: Upload
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./${{ github.event.repository.name }}-${{ github.ref }}-${{ runner.os }}.zip
        asset_name: ${{ github.event.repository.name }}-${{ github.ref }}-${{ runner.os }}.zip
        asset_content_type: application/zip